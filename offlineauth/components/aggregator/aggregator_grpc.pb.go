// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: aggregator.proto

package aggregator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AggServiceClient is the client API for AggService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggServiceClient interface {
	DSRetrieval(ctx context.Context, in *RetrieveDSALogRequest, opts ...grpc.CallOption) (*RetrieveDSALogResponse, error)
	SubmitNDS(ctx context.Context, in *SubmitNDSRequest, opts ...grpc.CallOption) (*SubmitNDSResponse, error)
}

type aggServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggServiceClient(cc grpc.ClientConnInterface) AggServiceClient {
	return &aggServiceClient{cc}
}

func (c *aggServiceClient) DSRetrieval(ctx context.Context, in *RetrieveDSALogRequest, opts ...grpc.CallOption) (*RetrieveDSALogResponse, error) {
	out := new(RetrieveDSALogResponse)
	err := c.cc.Invoke(ctx, "/aggregator.AggService/DSRetrieval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggServiceClient) SubmitNDS(ctx context.Context, in *SubmitNDSRequest, opts ...grpc.CallOption) (*SubmitNDSResponse, error) {
	out := new(SubmitNDSResponse)
	err := c.cc.Invoke(ctx, "/aggregator.AggService/SubmitNDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggServiceServer is the server API for AggService service.
// All implementations must embed UnimplementedAggServiceServer
// for forward compatibility
type AggServiceServer interface {
	DSRetrieval(context.Context, *RetrieveDSALogRequest) (*RetrieveDSALogResponse, error)
	SubmitNDS(context.Context, *SubmitNDSRequest) (*SubmitNDSResponse, error)
	mustEmbedUnimplementedAggServiceServer()
}

// UnimplementedAggServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAggServiceServer struct {
}

func (UnimplementedAggServiceServer) DSRetrieval(context.Context, *RetrieveDSALogRequest) (*RetrieveDSALogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DSRetrieval not implemented")
}
func (UnimplementedAggServiceServer) SubmitNDS(context.Context, *SubmitNDSRequest) (*SubmitNDSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitNDS not implemented")
}
func (UnimplementedAggServiceServer) mustEmbedUnimplementedAggServiceServer() {}

// UnsafeAggServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggServiceServer will
// result in compilation errors.
type UnsafeAggServiceServer interface {
	mustEmbedUnimplementedAggServiceServer()
}

func RegisterAggServiceServer(s grpc.ServiceRegistrar, srv AggServiceServer) {
	s.RegisterService(&AggService_ServiceDesc, srv)
}

func _AggService_DSRetrieval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveDSALogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggServiceServer).DSRetrieval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregator.AggService/DSRetrieval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggServiceServer).DSRetrieval(ctx, req.(*RetrieveDSALogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggService_SubmitNDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitNDSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggServiceServer).SubmitNDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregator.AggService/SubmitNDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggServiceServer).SubmitNDS(ctx, req.(*SubmitNDSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggService_ServiceDesc is the grpc.ServiceDesc for AggService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggregator.AggService",
	HandlerType: (*AggServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DSRetrieval",
			Handler:    _AggService_DSRetrieval_Handler,
		},
		{
			MethodName: "SubmitNDS",
			Handler:    _AggService_SubmitNDS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggregator.proto",
}
