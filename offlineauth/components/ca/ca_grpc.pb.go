// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: ca.proto

package ca

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CAServiceClient is the client API for CAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CAServiceClient interface {
	SubmitNewDelegCA(ctx context.Context, in *SubmitNewDelegCARequest, opts ...grpc.CallOption) (*SubmitNewDelegCAResponse, error)
}

type cAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCAServiceClient(cc grpc.ClientConnInterface) CAServiceClient {
	return &cAServiceClient{cc}
}

func (c *cAServiceClient) SubmitNewDelegCA(ctx context.Context, in *SubmitNewDelegCARequest, opts ...grpc.CallOption) (*SubmitNewDelegCAResponse, error) {
	out := new(SubmitNewDelegCAResponse)
	err := c.cc.Invoke(ctx, "/ca.CAService/SubmitNewDelegCA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CAServiceServer is the server API for CAService service.
// All implementations must embed UnimplementedCAServiceServer
// for forward compatibility
type CAServiceServer interface {
	SubmitNewDelegCA(context.Context, *SubmitNewDelegCARequest) (*SubmitNewDelegCAResponse, error)
	mustEmbedUnimplementedCAServiceServer()
}

// UnimplementedCAServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCAServiceServer struct {
}

func (UnimplementedCAServiceServer) SubmitNewDelegCA(context.Context, *SubmitNewDelegCARequest) (*SubmitNewDelegCAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitNewDelegCA not implemented")
}
func (UnimplementedCAServiceServer) mustEmbedUnimplementedCAServiceServer() {}

// UnsafeCAServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CAServiceServer will
// result in compilation errors.
type UnsafeCAServiceServer interface {
	mustEmbedUnimplementedCAServiceServer()
}

func RegisterCAServiceServer(s grpc.ServiceRegistrar, srv CAServiceServer) {
	s.RegisterService(&CAService_ServiceDesc, srv)
}

func _CAService_SubmitNewDelegCA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitNewDelegCARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAServiceServer).SubmitNewDelegCA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ca.CAService/SubmitNewDelegCA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAServiceServer).SubmitNewDelegCA(ctx, req.(*SubmitNewDelegCARequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CAService_ServiceDesc is the grpc.ServiceDesc for CAService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CAService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ca.CAService",
	HandlerType: (*CAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitNewDelegCA",
			Handler:    _CAService_SubmitNewDelegCA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ca.proto",
}
